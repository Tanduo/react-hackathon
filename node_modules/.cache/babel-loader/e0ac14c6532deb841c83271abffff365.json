{"ast":null,"code":"var _jsxFileName = \"/Users/bryan/DevProjects/UWGB/hackathon/src/components/FoodDelivery/FoodDeliveryComponent1.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport colorsData from '../../data/colors';\nimport { DataGrid } from '@material-ui/data-grid';\nimport Button from '@material-ui/core/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FoodDeliveryHome() {\n  _s();\n\n  //Create a colors variable in state and set it to the data coming in from our colors data file.\n  const [colors, setColors] = useState(colorsData); //Set the columns for our data grid, id, and color are the two object variables from our colors data objects.\n\n  const columns = [{\n    field: 'id',\n    headerName: 'ID',\n    width: 200\n  }, {\n    field: 'color',\n    headerName: 'Colors',\n    width: 200\n  }];\n\n  const addColor = () => {\n    //This function will add a hard coded color to the array of objects, \n    //it does not actually add data to the data set.\n    //spread operator add details\n    //This is to set a new variable that looks slightly different than our colors object.  \n    //This is so that react knows it is as different object.\n    const newColorsData = [...colors]; //We will create the new object we are adding to the array.\n\n    const newobject = {\n      \"id\": 1,\n      \"color\": \"newcolor\"\n    }; //We add the new object we created to the new array\n\n    newColorsData.push(newobject); //Now we set the colors object array to the new udpated array,\n    //by using setColors from our variable above it will update the sate since the object is different.\n\n    setColors(newColorsData); //this is an example of how to log output to the web browser console for troubleshooting.\n\n    console.log(colors);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [\"Test Component 1\", /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 750,\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: addColor,\n        children: \"Add Color\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(DataGrid, {\n        rows: colors,\n        columns: columns\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 3\n  }, this);\n}\n\n_s(FoodDeliveryHome, \"a3LncaDaAZgBmUjCxsnjKHUYSQU=\");\n\n_c = FoodDeliveryHome;\n\nvar _c;\n\n$RefreshReg$(_c, \"FoodDeliveryHome\");","map":{"version":3,"sources":["/Users/bryan/DevProjects/UWGB/hackathon/src/components/FoodDelivery/FoodDeliveryComponent1.jsx"],"names":["React","useState","useEffect","colorsData","DataGrid","Button","FoodDeliveryHome","colors","setColors","columns","field","headerName","width","addColor","newColorsData","newobject","push","console","log","height"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;;AAGA,eAAe,SAASC,gBAAT,GAA4B;AAAA;;AACzC;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAACE,UAAD,CAApC,CAFyC,CAIzC;;AACA,QAAMM,OAAO,GAAG,CACd;AAAEC,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,UAAU,EAAE,IAA3B;AAAiCC,IAAAA,KAAK,EAAE;AAAxC,GADc,EAEd;AAAEF,IAAAA,KAAK,EAAE,OAAT;AAAkBC,IAAAA,UAAU,EAAE,QAA9B;AAAwCC,IAAAA,KAAK,EAAE;AAA/C,GAFc,CAAhB;;AAKA,QAAMC,QAAQ,GAAG,MAAM;AACrB;AACA;AAEA;AACA;AACA;AACA,UAAMC,aAAa,GAAG,CAAC,GAAGP,MAAJ,CAAtB,CAPqB,CASrB;;AACA,UAAMQ,SAAS,GAAG;AAAE,YAAM,CAAR;AAAW,eAAS;AAApB,KAAlB,CAVqB,CAYrB;;AACAD,IAAAA,aAAa,CAACE,IAAd,CAAmBD,SAAnB,EAbqB,CAerB;AACA;;AACAP,IAAAA,SAAS,CAACM,aAAD,CAAT,CAjBqB,CAmBrB;;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYX,MAAZ;AAED,GAtBD;;AAyBA,sBACA,QAAC,KAAD,CAAO,QAAP;AAAA,gDAEE;AAAK,MAAA,KAAK,EAAE;AAAEY,QAAAA,MAAM,EAAE,GAAV;AAAeP,QAAAA,KAAK,EAAE;AAAtB,OAAZ;AAAA,8BACA,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,WAAhB;AAA4B,QAAA,KAAK,EAAC,SAAlC;AAA4C,QAAA,OAAO,EAAEC,QAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAIA,QAAC,QAAD;AACI,QAAA,IAAI,EAAEN,MADV;AAEI,QAAA,OAAO,EAAEE;AAFb;AAAA;AAAA;AAAA;AAAA,cAJA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAcD;;GAjDuBH,gB;;KAAAA,gB","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport colorsData from '../../data/colors';\nimport { DataGrid } from '@material-ui/data-grid';\nimport Button from '@material-ui/core/Button';\n\n\nexport default function FoodDeliveryHome() {\n  //Create a colors variable in state and set it to the data coming in from our colors data file.\n  const [colors, setColors] = useState(colorsData);\n\n  //Set the columns for our data grid, id, and color are the two object variables from our colors data objects.\n  const columns = [\n    { field: 'id', headerName: 'ID', width: 200 },\n    { field: 'color', headerName: 'Colors', width: 200 }\n  ];\n\n  const addColor = () => {\n    //This function will add a hard coded color to the array of objects, \n    //it does not actually add data to the data set.\n\n    //spread operator add details\n    //This is to set a new variable that looks slightly different than our colors object.  \n    //This is so that react knows it is as different object.\n    const newColorsData = [...colors];\n\n    //We will create the new object we are adding to the array.\n    const newobject = { \"id\": 1, \"color\": \"newcolor\"};\n\n    //We add the new object we created to the new array\n    newColorsData.push(newobject);\n    \n    //Now we set the colors object array to the new udpated array,\n    //by using setColors from our variable above it will update the sate since the object is different.\n    setColors(newColorsData);\n\n    //this is an example of how to log output to the web browser console for troubleshooting.\n    console.log(colors);\n\n  };\n\n\n  return (\n  <React.Fragment>\n    Test Component 1\n    <div style={{ height: 750, width: '100%' }}>\n    <Button variant=\"contained\" color=\"primary\" onClick={addColor}>\n        Add Color\n    </Button>\n    <DataGrid \n        rows={colors} \n        columns={columns} \n      />\n    </div>\n  </React.Fragment>\n  );\n}"]},"metadata":{},"sourceType":"module"}